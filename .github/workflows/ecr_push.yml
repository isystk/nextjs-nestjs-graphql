name: Build and Push to ECR Public

on:
  push:
    tags:
      - v*

jobs:
  ecr-backend:
    name: ECR Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build, tag, and push image to Amazon ECR Public
        id: build-and-push-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nextjs-nestjs-graphql-frontend
        run: |
          cd backend
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          docker build -t public.ecr.aws/$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push public.ecr.aws/$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo ::set-output name=version::$IMAGE_TAG

#      - name: Slack Notification
#        if: success()
#        run: |
#          jq -n --arg titleLink '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' '{
#            attachments: [{
#              pretext: ":white_check_mark: ECR publicに最新imageのpushが完了しました",
#              color: "good",
#              title: $titleLink,
#              title_link: $titleLink,
#              fields: [
#                {
#                  "title": "Tag",
#                  "value": "${{ steps.build-and-push-tag.outputs.version }}",
#                }
#              ]
#            }]
#          }' | curl ${{ secrets.SLACK_WEBHOOK_URL }} -X POST -H 'Content-Type: application/json' -d @-
